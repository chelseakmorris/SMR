# Soil Moisture Routing Model
# Water Balance Program
# Chelsea K Morris
# last updated 26 April 2013

# Distributed, physically-based model predicts soil moisture distribtuion using 
# a simple water balance approach.
# Input parameters include day of year, year, depth of precipitation, snowmelt,
# potential evaporation, soils data, and elevation. Use the setup.R file to prepare inputs.

setwd("~/Dropbox/Model")


# Global Conditions

	n <- nrow(watershed) # number of rows in gridded watershed
	m <- ncol(watershed) # number of columns in gridded watershed
	emptygrid <- watershed

	width <- 1000  #width of cell (cm). Currently set for 100m2 cell.

  GW <- vector(length=length(weather$Precip))  # Groundwater storage
  GW[1] <- 10  # Initial storage observed before our model run, (m3)
  factor<- 0.12 #Reservoir factor for determining baseflow. Temporary value. To be obtained from recession hydrographs.
  streamflow <- vector(length=length(weather$Precip))
  Outflow<-emptygrid #Initial conditions
  Excess<-emptygrid #Initial conditions set to mark NA's
  Runoff<-emptygrid #Id.
   
	AWCAmt<-SoilDepth*AWC #amount of water when cell is at field capacity (cm)
	SatAmt <- SoilDepth*Porosity #amount of water when entire cell is saturated (cm)
	
  StorageAmt <- AWCAmt  #Soil Water (cm). Initially at field capacity
  test.stor<-vector() #test for looking at storage change in a single cell over time
  test.cell<-25000 #Cell number for above test.
  
  setwd("~/Dropbox/Model/Brian's Ithaca Sites/results/Storage") #Set working directory to accept StorageAmt Rasters

  Aspect<-Aspect.trim #Aspect.trim file prepared from scratch_pad.R notes for small test sections of watershed.

# Set daily weather conditions & step through water balance
pb<-pbCreate(214, progress='window')
for (date in 1:length(weather$Precip)){
	P<-weather$Precip[date]  # precipitation (cm)
	Melt<-weather$Melt[date] # snowmelt (cm) from EcoHydRolgy "SnowMelt" function. Currently set to zero.
  PET<- weather$PET[date] # potential evapotranspiration (cm) from EcoHydRolgy "PET_fromTemp" function. Created in SetUp file.
	deltaP<- P-PET  # the difference between precipitation and PET (cm)

# The following is a user-defined function that adds the daily precipitation.
# The amount of water lost to evapotranspiration is determined with 
# Thornthwaite-Mather equation. The acutal ET is based on soil moisture content,
# ET coefficient, and potential ET. Borrowed from Jo Archibald. Slightly different
# from Frankenberger model.

	AddPrecip <- function(PrevStorage, deltaP, Melt, AWCAmt, filename='') {
	  out<-raster(PrevStorage)  
	  bs <-blockSize(out)
	  out<-writeStart(out, filename, overwrite=TRUE)
	  for (i in 1:bs$n) {
	    storageAmt <- getValues(PrevStorage, row=bs$row[i], nrows=bs$nrows[i])
	    aWCAmt <- getValues(AWCAmt, row=bs$row[i], nrows=bs$nrows[i])
	    if (deltaP > 0) {
	      storageAmt<- storageAmt + deltaP + Melt
	    } else if(deltaP <= 0){   			# Soil is under drying conditions
	      storageAmt <- storageAmt * exp (deltaP / aWCAmt)
	    }
	    out<-writeValues(out, storageAmt, bs$row[i])
	  }
	  out<- writeStop(out)
	  return(out)
	}  
	
  StorageAmt<-AddPrecip(StorageAmt, deltaP*100, Melt, AWCAmt) ##Calls AddPrecip function defined above
	


# Distribute precipitation input among soil layers.

      ###To be determined.

# Calculate portion of the soil column that is saturated, at field capacity,
# or below field capacity and assign an effective hydraulic conductivity that
# will determine lateral flow.

  ExcessRunoff<- function(TodaysStorage, Excess, Runoff, AWCAmt, SatAmt, filename=''){
  outE <- raster(Excess)
  outR <- raster(Runoff)
  bs<- blockSize(outE)
  outE<-writeStart(outE, filename, overwrite=TRUE)
  outR<-writeStart(outR, filename, overwrite=TRUE)
  for(i in 1:bs$n) {
    excess<-getValues(Excess, row=bs$row[i], nrows=bs$nrows[i])
    runoff<-getValues(Runoff, row=bs$row[i], nrows=bs$nrows[i])
    storageAmt<-getValues(TodaysStorage, row=bs$row[i], nrows=bs$nrows[i])
    aWCAmt<-getValues(AWCAmt, row=bs$row[i], nrows=bs$nrows[i])
    satAmt<-getValues(SatAmt, row=bs$row[i], nrows=bs$nrows[i])
    for (j in 1:(bs$nrows[i]*ncol(outE))){
      #print(paste("j=",j))
      #print(paste("i=",i))
      if (is.na(storageAmt[j])){
      }else if (storageAmt[j] <= aWCAmt[j]) {
       	 excess[j]<- 0   #Cell has uniform moisture gradient, no saturated portion
         runoff[j]<- 0
      }else if (storageAmt[j] > satAmt[j]){
        runoff[j] <- (storageAmt[j]-satAmt[j]) #Cell has some portion in above saturation 
                                            # that will become runoff.
       
        excess[j] <- (satAmt[j]-aWCAmt[j])         #The rest above field capacity will move laterally and/or to GW storage.
      }else {
        excess[j] <- (storageAmt[j]-aWCAmt[j])  #Cell has some sat. portion that move laterally and/or enter the GW storage.
        runoff[j] <- 0
      }
    }
    outE <- writeValues(outE, excess, bs$row[i] )
    outR <- writeValues(outR, runoff, bs$row[i] )
  }
    outE <- writeStop(outE)
    outR <- writeStop(outR)
    return(list(Excess=outE,Runoff=outR))
}  

  Results.ExcessRunoff<-ExcessRunoff(StorageAmt, Excess, Runoff, AWCAmt, SatAmt)   #Calling the Runoff function returns a list of two.
    Excess<- Results.ExcessRunoff$Excess
    Runoff<- Results.ExcessRunoff$Runoff
  
#  Calculate lateral flow from each cell based on Darcy's Law. Gradient equals  
#  land slope. Inputs include slope, saturated hydraulic conductivity, and depth
#  of saturated layer.

	# Condition 1: Lateral flow is at maximum for ks and slope.
	#Condition 2: For less than max lateral flow, assume all of excess water moves laterally.
	#Condition 3: No excess water

  LateralFlow<-function(Excess, Ksat, Slope, SoilDepth, Porosity, width, filename=''){
  outL <- raster(Excess)
  outE <- raster(Excess)
  bs<- blockSize(outL)
  outL<-writeStart(outL, filename, overwrite=TRUE)
  outE<-writeStart(outE, filename, overwrite=TRUE)
  for(i in 1:bs$n) {
    excess<-getValues(Excess, row=bs$row[i], nrows=bs$nrows[i])
    lateral<-getValues(Excess, row=bs$row[i], nrows=bs$nrows[i])
    ksat<-getValues(Ksat, row=bs$row[i], nrows=bs$nrows[i])
    slope<-getValues(Slope, row=bs$row[i], nrows=bs$nrows[i])
    soilDepth<-getValues(SoilDepth, row=bs$row[i], nrows=bs$nrows[i])
    porosity<-getValues(Porosity, row=bs$row[i], nrows=bs$nrows[i])
    for (j in 1:(bs$nrows[i]*ncol(outE))){
      if (is.na(ksat[j])){
      } else if (excess[j] >= (ksat[j]*slope[j]*(soilDepth[j]*width)/(soilDepth[j]*width))/porosity[j]) { # Condition 1
        lateral[j] <- (ksat[j]*slope[j]*(soilDepth[j]*width)/(soilDepth[j]*width))/porosity[j]     
      } else if (excess[j] < (ksat[j]*slope[j]*(soilDepth[j]*width)/(soilDepth[j]*width))/porosity[j]) { #Condition 2
        lateral[j] <-excess[j]                       
      } else if (excess[j] <= 0) {  #Condition 3
        lateral[j] <- 0
      }
      excess[j] <- excess[j]-lateral[j]
    }
    outE <- writeValues(outE, excess, bs$row[i] )
    outL <- writeValues(outL, lateral, bs$row[i] )
  }
  outE <- writeStop(outE)
  outL <- writeStop(outL)
  return(list(Excess=outE,Lateral=outL))
}
  
  Results.Lateral<-LateralFlow(Excess, Ksat, Slope, SoilDepth, Porosity, width)   #Calling the Lateral function returns a list of two.
    Excess.l<- Results.Lateral$Excess
    Lateral<- Results.Lateral$Lateral

#   Portion the lateral flow calculated above to adjacent cells. Need to figure
#   out how we will model diversions and tile drains (as necessary).

  Inflow<- Outflow  #outflow from yesterday becomes today's inflow
  
  OutFlowDirect<-function(Lateral, Aspect, OutletRow, OutletCol){
  lateral<-as.matrix(Lateral)
  lateral[is.na(lateral)] <- 0 #Necessary to allow internal NA's to accept lateral flow. Temporary solution.
  aspect<-as.matrix(Aspect)
  
  outflow<-(as.matrix(Lateral)*0)
  outflow[is.na(outflow)] <- 0 #Necessary to allow internal NA's to accept lateral flow. Temporary solution.
    for (y in 1:m) {
    	for(x in 1:n) {
    	  #print(paste("x=",x))
    	  #print(paste("y=",y)) 
    	  if (is.na(aspect[x,y])){
        }else if ((x==OutletRow) && (y==OutletCol)) {
            directStream <-lateral[x,y]
    	  }else {
    		  if ((aspect[x, y] >= 0) && (aspect[x,y] <= pi/8)) {
    		    outflow[x-1, y] <- outflow[x-1, y] + lateral[x,y]
    		  }else if ((aspect[x,y] > pi/8) && (aspect[x,y] <= 3*pi/8)) {
    		    outflow[x-1, y+1] <- outflow[x-1, y+1]+ lateral[x,y]
    		  }else if ((aspect[x,y] > 3*pi/8) && (aspect[x,y] <= 5*pi/8)) {
    		    outflow[x, y+1] <- outflow[x, y+1] + lateral[x,y]
    		  }else if ((aspect[x,y] > 5*pi/8) && (aspect[x,y] <= 7*pi/8)) {
    		    outflow[x+1, y+1] <- outflow[x+1, y+1] + lateral[x,y]
    		  }else if ((aspect[x,y] > 7*pi/8) && (aspect[x,y] <= 9*pi/8)) {
    		    outflow[x+1, y] <- outflow[x+1, y] + lateral[x,y]
    		  }else if ((aspect[x,y] > 9*pi/8) && (aspect[x,y] <= 11*pi/8)) {
    		    outflow[x+1, y-1] <- outflow[x+1, y-1] + lateral[x,y]
    		  }else if ((aspect[x,y] > 11*pi/8) && (aspect[x,y] <= 13*pi/8)) {
    		    outflow[x, y-1] <- outflow[x, y-1] + lateral[x,y]
    		  }else if ((aspect[x,y] > 13*pi/8) && (aspect[x,y] <= 15*pi/8)) {
    		    outflow[x-1, y-1] <- outflow[x-1, y-1] + lateral[x,y]
    		  }else if ((aspect[x,y] > 15*pi/8) && (aspect[x,y] <= 2*pi)) {
    		    outflow[x-1, y] <- outflow[x-1, y] + lateral[x,y]
    		  }
    		} 
  	  }
  	}
  Outflow<-mask(raster(outflow, template=Lateral), Aspect)
  return(list(Outflow=Outflow,directStream=directStream))
}

  Results.Out<-OutFlowDirect(Lateral, Aspect, a, b)
    Outflow<-Results.Out$Outflow
    streamflow[date]<-streamflow[date]+Results.Out$directStream

#   Calculate the amount of water lost to percolation through the restricting layer. 
#   Currently, because the lateral flow hasn't been subtracted out, all excess flow, 
#   up to K, is heading to GW instead of a portion moving laterally.

	Percolation<-function(Excess, KsatRestrictive, filename=''){
	  outE <- raster(Excess)
	  outP <- raster(Excess)
    bs <- blockSize(outE)
	  outE <- writeStart(outE, filename, overwrite=TRUE)
	  outP <- writeStart(outP, filename, overwrite=TRUE)
	  for(i in 1:bs$n) {
	    excess<-getValues(Excess, row=bs$row[i], nrows=bs$nrows[i])
	    ksatRestrictive<-getValues(KsatRestrictive, row=bs$row[i], nrows=bs$nrows[i])
	    perc<-getValues(Excess, row=bs$row[i], nrows=bs$nrows[i])
      for(j in 1:(bs$nrows[i]*ncol(outE))) {
        if (is.na(ksatRestrictive[j])){
        } else if (excess[j] >= (ksatRestrictive[j])) {
          perc[j] <- ksatRestrictive[j]
        } else if (excess[j] < ksatRestrictive[j]) {
          perc[j] <- excess[j]
        } else if (excess[j] <= 0) {
          perc[j] <- 0
        }
        excess[j] <- excess[j]-perc[j]
        }
	    outE <- writeValues(outE, excess, bs$row[i])
	    outP <- writeValues(outP, perc, bs$row[i])
	  }
	  outE <- writeStop(outE)
	  outP <- writeStop(outP)
    return(list(Perc=outP, Excess=outE))
  }
  
  Results.Perc<-Percolation(Excess.l, KsatRestrictive)
    Excess.lp<-Results.Perc$Excess
    Perc<- Results.Perc$Perc
  
  totalperc <- cellStats(Perc, stat='sum')*(100/100) #cm per 100m2 cell to m3
  GW[date+1] <- GW[date] + totalperc #Percolation is added to tomorrow's groundwater storage

  
#   Balance the lateral flows, percolation, runoff in the cell of interest. Subtract the lateral flow leaving to downslope cells and the percolation to GW. Subtract runoff generated from each cell. Add the lateral flow from yesterday's lateral outflow function.
  SumOutFlow<-function(Runoff, Lateral, Perc, filename=''){
    outO<- raster(Runoff)
    bs<-blockSize(outO)
    outO <- writeStart(outO, filename, overwrite=TRUE)
    for(i in 1:bs$n) {
#       print(paste("i=",i))
      lateral<-getValues(Lateral, row=bs$row[i], nrows=bs$nrows[i])
      perc<-getValues(Perc, row=bs$row[i], nrows=bs$nrows[i])
      runoff<-getValues(Runoff, row=bs$row[i], nrows=bs$nrows[i])
      flowout<-runoff
      for(j in 1:(bs$nrows[i]*ncol(outO))){
#         print(paste("j=",j))
        if (is.na(runoff[j])){
        }else flowout[j] <- lateral[j]+perc[j]+runoff[j]
        outO <- writeValues(outO, flowout, bs$row[i])
      }
    }
    outO <- writeStop(outO)
    return(outO)
  }
  
  TotalFlowOut<-SumOutFlow(Runoff, Lateral, Perc)
  
  Balance<-function(StorageAmt, TotalFlowOut, Inflow, filename=''){
    outS <- raster(StorageAmt)
    bs <- blockSize(outS)
    outS <- writeStart(outS, filename, overwrite=TRUE)
    for(i in 1:bs$n) {
#       print(paste("i=",i))
      storageAmt<-getValues(StorageAmt, row=bs$row[i], nrows=bs$nrows[i])
      outflow<-getValues(TotalFlowOut, row=bs$row[i], nrows=bs$nrows[i])
      inflow<-getValues(Inflow, row=bs$row[i], nrows=bs$nrows[i])
      for(j in 1:(bs$nrows[i]*ncol(outS))){
#         print(paste("j=",j))
        if (is.na(storageAmt[j])){
          } else storageAmt[j] <- storageAmt[j]-outflow[j]+inflow[j]
      outS <- writeValues(outS, storageAmt, bs$row[i])
      }
    }
    outS <- writeStop(outS)
    return(outS)
  }
  
  
  StorageAmt<-Balance(StorageAmt, TotalFlowOut, Inflow)
  
  if (date==1 | date==60 | date==120 | date==180){
    filename<-as.character(date)
    writeRaster(StorageAmt, filename, overwrite=TRUE)  #Write Raster to file every 60d
  }
  
# Add Runoff and baseflow directly to the streamflow at the outlet in cubic meters
  
  streamflow[date] <- streamflow[date] + (cellStats(Runoff, stat='sum')*(100/100))+(GW[date]/factor)
  GW[date]<-(1-factor)*GW[date] #Portion remaining after baseflow discharges to stream

                                          
test.stor <- append(test.stor, (StorageAmt[test.cell]))
pbStep(pb)
} #### Ends the WaterBalance Function
pbClose(pb, timer=TRUE)
